// Generated by gencpp from file segmentation/gazeOptimiser.msg
// DO NOT EDIT!


#ifndef SEGMENTATION_MESSAGE_GAZEOPTIMISER_H
#define SEGMENTATION_MESSAGE_GAZEOPTIMISER_H

#include <ros/service_traits.h>


#include <segmentation/gazeOptimiserRequest.h>
#include <segmentation/gazeOptimiserResponse.h>


namespace segmentation
{

struct gazeOptimiser
{

typedef gazeOptimiserRequest Request;
typedef gazeOptimiserResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct gazeOptimiser
} // namespace segmentation


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::segmentation::gazeOptimiser > {
  static const char* value()
  {
    return "8797234007ca66fde932e9a1f8ff3b3b";
  }

  static const char* value(const ::segmentation::gazeOptimiser&) { return value(); }
};

template<>
struct DataType< ::segmentation::gazeOptimiser > {
  static const char* value()
  {
    return "segmentation/gazeOptimiser";
  }

  static const char* value(const ::segmentation::gazeOptimiser&) { return value(); }
};


// service_traits::MD5Sum< ::segmentation::gazeOptimiserRequest> should match 
// service_traits::MD5Sum< ::segmentation::gazeOptimiser > 
template<>
struct MD5Sum< ::segmentation::gazeOptimiserRequest>
{
  static const char* value()
  {
    return MD5Sum< ::segmentation::gazeOptimiser >::value();
  }
  static const char* value(const ::segmentation::gazeOptimiserRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::segmentation::gazeOptimiserRequest> should match 
// service_traits::DataType< ::segmentation::gazeOptimiser > 
template<>
struct DataType< ::segmentation::gazeOptimiserRequest>
{
  static const char* value()
  {
    return DataType< ::segmentation::gazeOptimiser >::value();
  }
  static const char* value(const ::segmentation::gazeOptimiserRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::segmentation::gazeOptimiserResponse> should match 
// service_traits::MD5Sum< ::segmentation::gazeOptimiser > 
template<>
struct MD5Sum< ::segmentation::gazeOptimiserResponse>
{
  static const char* value()
  {
    return MD5Sum< ::segmentation::gazeOptimiser >::value();
  }
  static const char* value(const ::segmentation::gazeOptimiserResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::segmentation::gazeOptimiserResponse> should match 
// service_traits::DataType< ::segmentation::gazeOptimiser > 
template<>
struct DataType< ::segmentation::gazeOptimiserResponse>
{
  static const char* value()
  {
    return DataType< ::segmentation::gazeOptimiser >::value();
  }
  static const char* value(const ::segmentation::gazeOptimiserResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // SEGMENTATION_MESSAGE_GAZEOPTIMISER_H
